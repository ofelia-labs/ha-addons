#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Add-on: Chrony Secure Time
# Configure chronyd and handle cold boot time recovery
# ==============================================================================

set -Eeuo pipefail

readonly CONF="/etc/chrony/chrony.conf"
readonly DATA_DIR="/data/chrony"
readonly NTS_DIR="${DATA_DIR}/nts"
readonly LAST_EPOCH="${DATA_DIR}/last-epoch"

bashio::log.info "Initializing Chrony Secure Time add-on"

# Ensure chrony user exists
if ! id chrony &>/dev/null; then
  adduser -DH -s /sbin/nologin chrony
fi

# Prepare directories and fix ownership
mkdir -p "$NTS_DIR"
chown -R chrony:chrony "$DATA_DIR" /etc/chrony
chmod 0700 "$DATA_DIR" "$NTS_DIR"

# Read configuration
MODE="$(bashio::config 'mode')"
SET_CLOCK="$(bashio::config 'set_system_clock')"
STRATEGY="$(bashio::config 'bootstrap_strategy')"
EXTRA_CONFIG="$(bashio::config 'extra_config' || true)"

mapfile -t UPSTREAMS < <(bashio::config 'nts_upstreams[]')
mapfile -t ALLOW_V4 < <(bashio::config 'allow_ipv4[]' 2>/dev/null || true)
mapfile -t ALLOW_V6 < <(bashio::config 'allow_ipv6[]' 2>/dev/null || true)

# Validation
if [[ "$MODE" == "secure_client" ]]; then
  if (( ${#ALLOW_V4[@]} > 0 || ${#ALLOW_V6[@]} > 0 )); then
    bashio::log.fatal "secure_client mode must not define allowlists"
    exit 1
  fi
elif [[ "$MODE" == "secure_gateway" ]]; then
  if (( ${#ALLOW_V4[@]} == 0 && ${#ALLOW_V6[@]} == 0 )); then
    bashio::log.fatal "secure_gateway mode requires allow_ipv4 or allow_ipv6 entries"
    exit 1
  fi
else
  bashio::log.fatal "Unknown mode: ${MODE}"
  exit 1
fi

# Generate chrony.conf
{
  echo "# Generated by Chrony Secure Time add-on"
  echo "user chrony"
  echo "cmdport 0"
  echo "noclientlog"
  echo "minsources 2"
  echo "leapsectz right/UTC"
  echo "makestep 1.0 5"
  echo "rtcsync"
  echo "logchange 0.5"
  echo "driftfile ${DATA_DIR}/drift"
  echo "ntsdumpdir ${NTS_DIR}"

  for host in "${UPSTREAMS[@]}"; do
    [[ -n "$host" ]] && echo "server ${host} iburst nts"
  done
  echo "ntsrefresh 8h"

  if [[ "$SET_CLOCK" == "true" ]]; then
    if [[ "$STRATEGY" == "persistent_then_initstepslew" || "$STRATEGY" == "initstepslew" ]]; then
      echo "initstepslew 20 0.pool.ntp.org 1.pool.ntp.org 2.pool.ntp.org 3.pool.ntp.org"
    fi
  fi

  if [[ "$MODE" == "secure_client" ]]; then
    echo "port 0"
  else
    echo "bindaddress 0.0.0.0"
    echo "bindaddress ::"
    for net in "${ALLOW_V4[@]}"; do
      [[ -n "$net" ]] && echo "allow ${net}"
    done
    for net in "${ALLOW_V6[@]}"; do
      [[ -n "$net" ]] && echo "allow ${net}"
    done
  fi

  if [[ -n "${EXTRA_CONFIG:-}" ]]; then
    echo
    echo "# --- extra_config (verbatim) ---"
    echo "${EXTRA_CONFIG}"
  fi
} > "$CONF"

chmod 0644 "$CONF"
chown chrony:chrony "$CONF"

# Persistent time recovery
if [[ "$SET_CLOCK" == "true" ]]; then
  if [[ "$STRATEGY" == "persistent_then_initstepslew" || "$STRATEGY" == "persistent_only" ]]; then
    if [[ -f "$LAST_EPOCH" && $(date +%Y) -lt 2025 ]]; then
      saved=$(cat "$LAST_EPOCH")
      now=$(date +%s)
      if [[ $saved -gt $now ]]; then
        max=$((now + 172800))
        if [[ $saved -gt $max ]]; then
          target=$max
        else
          target=$saved
        fi
        date -u -s "@${target}"
      fi
    fi
  fi
fi

bashio::log.info "Initialization complete"

